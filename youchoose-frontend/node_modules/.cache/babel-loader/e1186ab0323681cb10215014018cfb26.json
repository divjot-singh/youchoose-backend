{"ast":null,"code":"import { getAuth, getRedirectResult, GoogleAuthProvider } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_API_ID,\n  measurementId: process.env.FIREBASE_MEASUREMENT_ID\n};\nexport const InitialiseFirebaseApp = () => {\n  console.log(firebaseConfig);\n  const app = initializeApp(firebaseConfig);\n  const analytics = getAnalytics(app);\n};\n_c = InitialiseFirebaseApp;\nexport const SignUpWithGoogle = () => {\n  console.log('hello');\n  const auth = getAuth();\n  getRedirectResult(auth).then(result => {\n    // This gives you a Google Access Token. You can use it to access Google APIs.\n    if (result) {\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential === null || credential === void 0 ? void 0 : credential.accessToken;\n      const user = result.user;\n      console.log(token);\n      console.log(user);\n    }\n  }).catch(error => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message; // The email of the user's account used.\n\n    const email = error.customData.email; // The AuthCredential type that was used.\n\n    const credential = GoogleAuthProvider.credentialFromError(error); // ...\n  });\n};\n_c2 = SignUpWithGoogle;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InitialiseFirebaseApp\");\n$RefreshReg$(_c2, \"SignUpWithGoogle\");","map":{"version":3,"names":["getAuth","getRedirectResult","GoogleAuthProvider","initializeApp","getAnalytics","firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","FIREBASE_AUTH_DOMAIN","projectId","FIREBASE_PROJECT_ID","storageBucket","FIREBASE_STORAGE_BUCKET","messagingSenderId","FIREBASE_MESSAGING_SENDER_ID","appId","FIREBASE_API_ID","measurementId","FIREBASE_MEASUREMENT_ID","InitialiseFirebaseApp","console","log","app","analytics","SignUpWithGoogle","auth","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError"],"sources":["/Users/divjotsingh/Documents/Youchoose/youchoose/src/services/firebaseService.tsx"],"sourcesContent":["import React from 'react'\nimport { Auth, getAuth, getRedirectResult, GoogleAuthProvider, OAuthCredential, UserCredential } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_API_ID,\n  measurementId: process.env.FIREBASE_MEASUREMENT_ID\n};\n\nexport const InitialiseFirebaseApp = () => {\n    console.log(firebaseConfig)\n    const app = initializeApp(firebaseConfig);\n    const analytics = getAnalytics(app);\n}\n\nexport const SignUpWithGoogle = () => {\n        console.log('hello')\n        const auth : Auth = getAuth();\n        getRedirectResult(auth)\n        .then((result : UserCredential | null) => {\n            // This gives you a Google Access Token. You can use it to access Google APIs.\n            if(result){\n                const credential: OAuthCredential | null = GoogleAuthProvider.credentialFromResult(result);\n                const token = credential?.accessToken;\n                const user = result.user;\n                console.log(token)\n                console.log(user)\n            }\n        }).catch((error) => {\n            // Handle Errors here.\n            const errorCode = error.code;\n            const errorMessage = error.message;\n            // The email of the user's account used.\n            const email = error.customData.email;\n            // The AuthCredential type that was used.\n            const credential = GoogleAuthProvider.credentialFromError(error);\n            // ...\n        });\n}\n"],"mappings":"AACA,SAAeA,OAAf,EAAwBC,iBAAxB,EAA2CC,kBAA3C,QAAsG,eAAtG;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADC;EAErBC,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFH;EAGrBC,SAAS,EAAEL,OAAO,CAACC,GAAR,CAAYK,mBAHF;EAIrBC,aAAa,EAAEP,OAAO,CAACC,GAAR,CAAYO,uBAJN;EAKrBC,iBAAiB,EAAET,OAAO,CAACC,GAAR,CAAYS,4BALV;EAMrBC,KAAK,EAAEX,OAAO,CAACC,GAAR,CAAYW,eANE;EAOrBC,aAAa,EAAEb,OAAO,CAACC,GAAR,CAAYa;AAPN,CAAvB;AAUA,OAAO,MAAMC,qBAAqB,GAAG,MAAM;EACvCC,OAAO,CAACC,GAAR,CAAYnB,cAAZ;EACA,MAAMoB,GAAG,GAAGtB,aAAa,CAACE,cAAD,CAAzB;EACA,MAAMqB,SAAS,GAAGtB,YAAY,CAACqB,GAAD,CAA9B;AACH,CAJM;KAAMH,qB;AAMb,OAAO,MAAMK,gBAAgB,GAAG,MAAM;EAC9BJ,OAAO,CAACC,GAAR,CAAY,OAAZ;EACA,MAAMI,IAAW,GAAG5B,OAAO,EAA3B;EACAC,iBAAiB,CAAC2B,IAAD,CAAjB,CACCC,IADD,CACOC,MAAD,IAAoC;IACtC;IACA,IAAGA,MAAH,EAAU;MACN,MAAMC,UAAkC,GAAG7B,kBAAkB,CAAC8B,oBAAnB,CAAwCF,MAAxC,CAA3C;MACA,MAAMG,KAAK,GAAGF,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEG,WAA1B;MACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB;MACAZ,OAAO,CAACC,GAAR,CAAYS,KAAZ;MACAV,OAAO,CAACC,GAAR,CAAYW,IAAZ;IACH;EACJ,CAVD,EAUGC,KAVH,CAUUC,KAAD,IAAW;IAChB;IACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;IACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHgB,CAIhB;;IACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,UAAN,CAAiBD,KAA/B,CALgB,CAMhB;;IACA,MAAMX,UAAU,GAAG7B,kBAAkB,CAAC0C,mBAAnB,CAAuCP,KAAvC,CAAnB,CAPgB,CAQhB;EACH,CAnBD;AAoBP,CAvBM;MAAMV,gB"},"metadata":{},"sourceType":"module"}