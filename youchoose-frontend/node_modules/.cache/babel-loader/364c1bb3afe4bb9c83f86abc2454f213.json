{"ast":null,"code":"import Axios from 'axios';\nimport { API_ENDPOINTS } from '../utils/apiEndpoints';\nimport { LocalStorageKeys } from '../utils/localstorageKeys';\nimport LocalStorageMethods from './localstorageService';\n\nlet _getAxiosInstance = _ref => {\n  let {\n    isAbsoluteUrl = false,\n    isYoutubeApiUrl = false\n  } = _ref;\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  };\n  const authToken = LocalStorageMethods.get(LocalStorageKeys.token);\n\n  if (authToken) {\n    headers['Authorization'] = authToken;\n  }\n\n  let axios = Axios.create({\n    baseURL: isAbsoluteUrl ? '' : isYoutubeApiUrl ? API_ENDPOINTS.youtubeBaseUrl : process.env.REACT_APP_API_URL,\n    timeout: 30000,\n    headers: headers,\n    params: isYoutubeApiUrl ? {\n      part: 'snippet',\n      maxResults: 50,\n      key: process.env.REACT_APP_YOUTUBE_API_KEY\n    } : undefined,\n    validateStatus: function (status) {\n      return status >= 200 && status < 400;\n    }\n  });\n  axios.interceptors.response.use(response => {\n    return response;\n  }, error => {\n    if (error && error.response && error.response.status === 401) {\n      LocalStorageMethods.clear();\n      window.location.reload();\n    } else {\n      return Promise.reject(error); // todo kr - form some model for error\n    }\n  });\n  return axios;\n};\n\nexport let NetworkServiceMethods;\n\n(function (NetworkServiceMethods) {\n  NetworkServiceMethods[\"GET\"] = \"GET\";\n  NetworkServiceMethods[\"POST\"] = \"POST\";\n})(NetworkServiceMethods || (NetworkServiceMethods = {}));\n\nlet _makeRequest = async _ref2 => {\n  let {\n    url,\n    type,\n    data,\n    isAbsoluteUrl,\n    isYoutubeApiUrl\n  } = _ref2;\n  let response;\n\n  try {\n    if (type === 'GET') {\n      response = await _getAxiosInstance({\n        isAbsoluteUrl,\n        isYoutubeApiUrl\n      }).get(url, {\n        params: data\n      });\n    }\n\n    if (type === 'POST') {\n      response = await _getAxiosInstance({\n        isAbsoluteUrl,\n        isYoutubeApiUrl\n      }).post(url, data);\n    }\n\n    if (response.data) {\n      if (isYoutubeApiUrl) {\n        return response.data.items;\n      } else if (response.data.success) {\n        return Promise.resolve(response.data.data);\n      } else {\n        return _handleError(response.data.errors);\n      }\n    }\n  } catch (error) {\n    return _handleError(error);\n  }\n};\n\nlet _handleError = error => {\n  return Promise.resolve({\n    'error': error // todo kr - form some model for error\n\n  });\n};\n\nlet NetworkService = {\n  get: _ref3 => {\n    let {\n      url,\n      data,\n      isAbsoluteUrl,\n      isYoutubeApiUrl\n    } = _ref3;\n    return _makeRequest({\n      url,\n      type: NetworkServiceMethods.GET,\n      data,\n      isAbsoluteUrl,\n      isYoutubeApiUrl\n    });\n  },\n  post: _ref4 => {\n    let {\n      url,\n      data,\n      isAbsoluteUrl,\n      isYoutubeApiUrl\n    } = _ref4;\n    return _makeRequest({\n      url,\n      type: NetworkServiceMethods.POST,\n      data,\n      isAbsoluteUrl,\n      isYoutubeApiUrl\n    });\n  }\n};\nexport default NetworkService;","map":{"version":3,"names":["Axios","API_ENDPOINTS","LocalStorageKeys","LocalStorageMethods","_getAxiosInstance","isAbsoluteUrl","isYoutubeApiUrl","headers","Accept","authToken","get","token","axios","create","baseURL","youtubeBaseUrl","process","env","REACT_APP_API_URL","timeout","params","part","maxResults","key","REACT_APP_YOUTUBE_API_KEY","undefined","validateStatus","status","interceptors","response","use","error","clear","window","location","reload","Promise","reject","NetworkServiceMethods","_makeRequest","url","type","data","post","items","success","resolve","_handleError","errors","NetworkService","GET","POST"],"sources":["/Users/divjotsingh/Documents/Youchoose/youchoose/src/services/networkService.tsx"],"sourcesContent":["import Axios from 'axios'\nimport { API_ENDPOINTS } from '../utils/apiEndpoints'\nimport { LocalStorageKeys } from '../utils/localstorageKeys'\nimport LocalStorageMethods from './localstorageService'\n\n\nlet _getAxiosInstance = ({isAbsoluteUrl = false, isYoutubeApiUrl = false}) => {\n  const headers:any =  {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }\n  const authToken = LocalStorageMethods.get(LocalStorageKeys.token)\n  if (authToken){\n    headers['Authorization'] = authToken\n  }\n  let axios = Axios.create({\n    baseURL: isAbsoluteUrl ? '' : isYoutubeApiUrl ? API_ENDPOINTS.youtubeBaseUrl : process.env.REACT_APP_API_URL,\n    timeout: 30000,\n    headers: headers,\n    params:isYoutubeApiUrl ? {\n      part:'snippet',\n      maxResults:50,\n      key:process.env.REACT_APP_YOUTUBE_API_KEY\n    } : undefined,\n    validateStatus: function (status) {\n      return status >= 200 && status < 400\n    },\n  })\n\n  axios.interceptors.response.use(\n    response => {\n      return response\n    },\n    error => {\n      if (error && error.response && error.response.status === 401) {\n        LocalStorageMethods.clear()\n        window.location.reload()\n      } else {\n        return Promise.reject(error)\n        // todo kr - form some model for error\n      }\n    }\n  )\n\n  return axios\n}\n\nexport interface NetworkServicemethods{\n    url:string;\n    data?:object;\n    isAbsoluteUrl?:boolean;\n    isYoutubeApiUrl?:boolean\n}\n\nexport enum NetworkServiceMethods{\n    GET='GET',\n    POST='POST'\n}\n\nexport interface MakeRequestMethods{\n    url:string;\n    data?:object;\n    isAbsoluteUrl?:boolean;\n    type:NetworkServiceMethods;\n    isYoutubeApiUrl?:boolean;\n}\n\nlet _makeRequest = async ({url, type, data, isAbsoluteUrl, isYoutubeApiUrl}:MakeRequestMethods) => {\n  let response:any\n\n  try {\n    if (type === 'GET') {\n      response = await _getAxiosInstance({ isAbsoluteUrl, isYoutubeApiUrl }).get(url, { params: data })\n    }\n    \n    if (type === 'POST') {\n      response = await _getAxiosInstance({ isAbsoluteUrl, isYoutubeApiUrl }).post(url, data)\n    }\n\n    if (response.data) {\n      if(isYoutubeApiUrl){\n        return response.data.items;\n      } else if (response.data.success) {\n        return Promise.resolve(response.data.data)\n      } else {\n        return _handleError(response.data.errors)\n      }\n    }\n\n  } catch (error) {\n    return _handleError(error)\n  }\n}\n\nlet _handleError = (error:any) => {\n  return Promise.resolve({\n    'error': error\n    // todo kr - form some model for error\n  })\n}\n\n\n\nlet NetworkService = {\n  get: ({url, data, isAbsoluteUrl, isYoutubeApiUrl}:NetworkServicemethods) => {\n    return _makeRequest({url, type: NetworkServiceMethods.GET, data, isAbsoluteUrl, isYoutubeApiUrl})\n  },\n  post: ({url, data, isAbsoluteUrl, isYoutubeApiUrl}:NetworkServicemethods) => {\n    return _makeRequest({url, type: NetworkServiceMethods.POST, data, isAbsoluteUrl, isYoutubeApiUrl})\n  }\n}\n\nexport default NetworkService\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}