{"ast":null,"code":"import { Register, SignUpWithGoogle } from \"./firebaseService\";\nexport let AuthType;\n\n(function (AuthType) {\n  AuthType[\"Register\"] = \"register\";\n  AuthType[\"Email\"] = \"email\";\n  AuthType[\"Google\"] = \"google\";\n})(AuthType || (AuthType = {}));\n\nconst Authenticate = async (authType, email, password, username) => {\n  switch (authType) {\n    case AuthType.Google:\n      return await SignUpWithGoogle();\n\n    case AuthType.Register:\n      return await Register(email, password, username);\n\n    default:\n      return await SignUpWithGoogle();\n  }\n};\n\n_c = Authenticate;\nexport default Authenticate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Authenticate\");","map":{"version":3,"names":["Register","SignUpWithGoogle","AuthType","Authenticate","authType","email","password","username","Google"],"sources":["/Users/divjotsingh/Documents/Youchoose/youchoose/src/services/authService.tsx"],"sourcesContent":["import {Error} from \"../entities/error\"\nimport User from \"../entities/user\"\nimport { Register, SignUpWithGoogle } from \"./firebaseService\"\n\nexport enum AuthType {\n    Register = 'register',\n    Email = 'email',\n    Google = 'google'\n}\n\nconst Authenticate = async (authType: AuthType,email?:string, password?:string, username?:string): Promise<User | null | Error> => {\n    switch(authType){\n        case AuthType.Google:\n            return await SignUpWithGoogle()\n        case AuthType.Register:\n            return await Register(email, password, username)\n        default:\n            return await SignUpWithGoogle()\n    }\n}\n\nexport default Authenticate"],"mappings":"AAEA,SAASA,QAAT,EAAmBC,gBAAnB,QAA2C,mBAA3C;AAEA,WAAYC,QAAZ;;WAAYA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAMZ,MAAMC,YAAY,GAAG,OAAOC,QAAP,EAA0BC,KAA1B,EAAyCC,QAAzC,EAA2DC,QAA3D,KAA8G;EAC/H,QAAOH,QAAP;IACI,KAAKF,QAAQ,CAACM,MAAd;MACI,OAAO,MAAMP,gBAAgB,EAA7B;;IACJ,KAAKC,QAAQ,CAACF,QAAd;MACI,OAAO,MAAMA,QAAQ,CAACK,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,CAArB;;IACJ;MACI,OAAO,MAAMN,gBAAgB,EAA7B;EANR;AAQH,CATD;;KAAME,Y;AAWN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}