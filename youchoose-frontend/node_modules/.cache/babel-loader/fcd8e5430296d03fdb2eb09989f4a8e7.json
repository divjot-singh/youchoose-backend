{"ast":null,"code":"import Helper from './Helper';\nexport default class FuzzySearch {\n  constructor() {\n    let haystack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!Array.isArray(keys)) {\n      options = keys;\n      keys = [];\n    }\n\n    this.haystack = haystack;\n    this.keys = keys;\n    this.options = Object.assign({\n      caseSensitive: false,\n      sort: false\n    }, options);\n  }\n\n  search() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    if (query === '') {\n      return this.haystack;\n    }\n\n    const results = [];\n\n    for (let i = 0; i < this.haystack.length; i++) {\n      const item = this.haystack[i];\n\n      if (this.keys.length === 0) {\n        const score = FuzzySearch.isMatch(item, query, this.options.caseSensitive);\n\n        if (score) {\n          results.push({\n            item,\n            score\n          });\n        }\n      } else {\n        for (let y = 0; y < this.keys.length; y++) {\n          const propertyValues = Helper.getDescendantProperty(item, this.keys[y]);\n          let found = false;\n\n          for (let z = 0; z < propertyValues.length; z++) {\n            const score = FuzzySearch.isMatch(propertyValues[z], query, this.options.caseSensitive);\n\n            if (score) {\n              found = true;\n              results.push({\n                item,\n                score\n              });\n              break;\n            }\n          }\n\n          if (found) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.options.sort) {\n      results.sort((a, b) => a.score - b.score);\n    }\n\n    return results.map(result => result.item);\n  }\n\n  static isMatch(item, query, caseSensitive) {\n    item = String(item);\n    query = String(query);\n\n    if (!caseSensitive) {\n      item = item.toLocaleLowerCase();\n      query = query.toLocaleLowerCase();\n    }\n\n    const indexes = FuzzySearch.nearestIndexesFor(item, query);\n\n    if (!indexes) {\n      return false;\n    } // Exact matches should be first.\n\n\n    if (item === query) {\n      return 1;\n    } // If we have more than 2 letters, matches close to each other should be first.\n\n\n    if (indexes.length > 1) {\n      return 2 + (indexes[indexes.length - 1] - indexes[0]);\n    } // Matches closest to the start of the string should be first.\n\n\n    return 2 + indexes[0];\n  }\n\n  static nearestIndexesFor(item, query) {\n    const letters = query.split('');\n    let indexes = [];\n    const indexesOfFirstLetter = FuzzySearch.indexesOfFirstLetter(item, query);\n    indexesOfFirstLetter.forEach((startingIndex, loopingIndex) => {\n      let index = startingIndex + 1;\n      indexes[loopingIndex] = [startingIndex];\n\n      for (let i = 1; i < letters.length; i++) {\n        const letter = letters[i];\n        index = item.indexOf(letter, index);\n\n        if (index === -1) {\n          indexes[loopingIndex] = false;\n          break;\n        }\n\n        indexes[loopingIndex].push(index);\n        index++;\n      }\n    });\n    indexes = indexes.filter(letterIndexes => letterIndexes !== false);\n\n    if (!indexes.length) {\n      return false;\n    }\n\n    return indexes.sort((a, b) => {\n      if (a.length === 1) {\n        return a[0] - b[0];\n      }\n\n      a = a[a.length - 1] - a[0];\n      b = b[b.length - 1] - b[0];\n      return a - b;\n    })[0];\n  }\n\n  static indexesOfFirstLetter(item, query) {\n    const match = query[0];\n    return item.split('').map((letter, index) => {\n      if (letter !== match) {\n        return false;\n      }\n\n      return index;\n    }).filter(index => index !== false);\n  }\n\n}","map":{"version":3,"names":["Helper","FuzzySearch","constructor","haystack","keys","options","Array","isArray","Object","assign","caseSensitive","sort","search","query","results","i","length","item","score","isMatch","push","y","propertyValues","getDescendantProperty","found","z","a","b","map","result","String","toLocaleLowerCase","indexes","nearestIndexesFor","letters","split","indexesOfFirstLetter","forEach","startingIndex","loopingIndex","index","letter","indexOf","filter","letterIndexes","match"],"sources":["/Users/divjotsingh/Documents/Youchoose/youchoose/node_modules/fuzzy-search/src/FuzzySearch.js"],"sourcesContent":["import Helper from './Helper';\n\nexport default class FuzzySearch {\n  constructor(haystack = [], keys = [], options = {}) {\n    if (! Array.isArray(keys)) {\n      options = keys;\n      keys = [];\n    }\n\n    this.haystack = haystack;\n    this.keys = keys;\n    this.options = Object.assign({\n      caseSensitive: false,\n      sort: false,\n    }, options);\n  }\n\n  search(query = '') {\n    if (query === '') {\n      return this.haystack;\n    }\n\n    const results = [];\n\n    for (let i = 0; i < this.haystack.length; i++) {\n      const item = this.haystack[i];\n\n      if (this.keys.length === 0) {\n        const score = FuzzySearch.isMatch(item, query, this.options.caseSensitive);\n\n        if (score) {\n          results.push({ item, score });\n        }\n      } else {\n        for (let y = 0; y < this.keys.length; y++) {\n          const propertyValues = Helper.getDescendantProperty(item, this.keys[y]);\n\n          let found = false;\n\n          for (let z = 0; z < propertyValues.length; z++) {\n            const score = FuzzySearch.isMatch(propertyValues[z], query, this.options.caseSensitive);\n\n            if (score) {\n              found = true;\n\n              results.push({ item, score });\n\n              break;\n            }\n          }\n\n          if (found) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.options.sort) {\n      results.sort((a, b) => a.score - b.score);\n    }\n\n    return results.map(result => result.item);\n  }\n\n  static isMatch(item, query, caseSensitive) {\n    item = String(item);\n    query = String(query);\n\n    if (! caseSensitive) {\n      item = item.toLocaleLowerCase();\n      query = query.toLocaleLowerCase();\n    }\n\n    const indexes = FuzzySearch.nearestIndexesFor(item, query);\n\n    if (! indexes) {\n      return false;\n    }\n\n    // Exact matches should be first.\n    if (item === query) {\n      return 1;\n    }\n\n    // If we have more than 2 letters, matches close to each other should be first.\n    if (indexes.length > 1) {\n      return 2 + (indexes[indexes.length - 1] - indexes[0]);\n    }\n\n    // Matches closest to the start of the string should be first.\n    return 2 + indexes[0];\n  }\n\n  static nearestIndexesFor(item, query) {\n    const letters = query.split('');\n    let indexes = [];\n\n    const indexesOfFirstLetter = FuzzySearch.indexesOfFirstLetter(item, query);\n\n    indexesOfFirstLetter.forEach((startingIndex, loopingIndex) => {\n      let index = startingIndex + 1;\n\n      indexes[loopingIndex] = [startingIndex];\n\n      for (let i = 1; i < letters.length; i++) {\n        const letter = letters[i];\n\n        index = item.indexOf(letter, index);\n\n        if (index === -1) {\n          indexes[loopingIndex] = false;\n\n          break;\n        }\n\n        indexes[loopingIndex].push(index);\n\n        index++;\n      }\n    });\n\n    indexes = indexes.filter(letterIndexes => letterIndexes !== false);\n\n    if (! indexes.length) {\n      return false;\n    }\n\n    return indexes.sort((a, b) => {\n      if (a.length === 1) {\n        return a[0] - b[0];\n      }\n\n      a = a[a.length - 1] - a[0];\n      b = b[b.length - 1] - b[0];\n\n      return a - b;\n    })[0];\n  }\n\n  static indexesOfFirstLetter(item, query) {\n    const match = query[0];\n\n    return item.split('').map((letter, index) => {\n      if (letter !== match) {\n        return false;\n      }\n\n      return index;\n    }).filter(index => index !== false);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}