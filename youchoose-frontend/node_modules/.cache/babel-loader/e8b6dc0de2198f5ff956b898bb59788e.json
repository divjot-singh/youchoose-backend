{"ast":null,"code":"import Axios from 'axios';\nimport { LocalStorageKeys } from '../utils/localstorageKeys';\nimport LocalStorageMethods from './localstorageService';\n\nlet _getAxiosInstance = _ref => {\n  let {\n    isAbsoluteUrl = false\n  } = _ref;\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  };\n  const authToken = LocalStorageMethods.get(LocalStorageKeys.token);\n\n  if (authToken) {\n    headers['Authorization'] = authToken;\n  }\n\n  let axios = Axios.create({\n    baseURL: isAbsoluteUrl ? '' : process.env.REACT_APP_API_URL,\n    timeout: 30000,\n    headers: headers,\n    validateStatus: function (status) {\n      return status >= 200 && status < 400;\n    }\n  });\n  axios.interceptors.response.use(response => {\n    return response;\n  }, error => {\n    if (error && error.response && error.response.status === 401) {\n      LocalStorageMethods.clear();\n      window.location.reload();\n    } else {\n      return Promise.reject(error); // todo kr - form some model for error\n    }\n  });\n  return axios;\n};\n\nexport let NetworkServiceMethods;\n\n(function (NetworkServiceMethods) {\n  NetworkServiceMethods[\"GET\"] = \"GET\";\n  NetworkServiceMethods[\"POST\"] = \"POST\";\n})(NetworkServiceMethods || (NetworkServiceMethods = {}));\n\nlet _makeRequest = async _ref2 => {\n  let {\n    url,\n    type,\n    data,\n    isAbsoluteUrl\n  } = _ref2;\n  let response;\n\n  try {\n    if (type === 'GET') {\n      response = await _getAxiosInstance({\n        isAbsoluteUrl\n      }).get(url, {\n        params: data\n      });\n    }\n\n    if (type === 'POST') {\n      response = await _getAxiosInstance({\n        isAbsoluteUrl\n      }).post(url, data);\n    }\n\n    if (response.data) {\n      console.log(response.data);\n\n      if (response.data.success) {\n        return Promise.resolve(response.data.data);\n      } else {\n        return _handleError(response.data.errors);\n      }\n    }\n  } catch (error) {\n    return _handleError(error);\n  }\n};\n\nlet _handleError = error => {\n  return Promise.resolve({\n    'error': error // todo kr - form some model for error\n\n  });\n};\n\nlet NetworkService = {\n  get: _ref3 => {\n    let {\n      url,\n      data,\n      isAbsoluteUrl\n    } = _ref3;\n    return _makeRequest({\n      url,\n      type: NetworkServiceMethods.GET,\n      data,\n      isAbsoluteUrl\n    });\n  },\n  post: _ref4 => {\n    let {\n      url,\n      data,\n      isAbsoluteUrl\n    } = _ref4;\n    return _makeRequest({\n      url,\n      type: NetworkServiceMethods.POST,\n      data,\n      isAbsoluteUrl\n    });\n  }\n};\nexport default NetworkService;","map":{"version":3,"names":["Axios","LocalStorageKeys","LocalStorageMethods","_getAxiosInstance","isAbsoluteUrl","headers","Accept","authToken","get","token","axios","create","baseURL","process","env","REACT_APP_API_URL","timeout","validateStatus","status","interceptors","response","use","error","clear","window","location","reload","Promise","reject","NetworkServiceMethods","_makeRequest","url","type","data","params","post","console","log","success","resolve","_handleError","errors","NetworkService","GET","POST"],"sources":["/Users/divjotsingh/Documents/Youchoose/youchoose/src/services/networkService.tsx"],"sourcesContent":["import Axios from 'axios'\nimport { LocalStorageKeys } from '../utils/localstorageKeys'\nimport LocalStorageMethods from './localstorageService'\n\n\nlet _getAxiosInstance = ({isAbsoluteUrl = false}) => {\n  const headers:any =  {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  }\n  const authToken = LocalStorageMethods.get(LocalStorageKeys.token)\n  if (authToken){\n    headers['Authorization'] = authToken\n  }\n  let axios = Axios.create({\n    baseURL: isAbsoluteUrl ? '' : process.env.REACT_APP_API_URL,\n    timeout: 30000,\n    headers: headers,\n    validateStatus: function (status) {\n      return status >= 200 && status < 400\n    },\n  })\n\n  axios.interceptors.response.use(\n    response => {\n      return response\n    },\n    error => {\n      if (error && error.response && error.response.status === 401) {\n        LocalStorageMethods.clear()\n        window.location.reload()\n      } else {\n        return Promise.reject(error)\n        // todo kr - form some model for error\n      }\n    }\n  )\n\n  return axios\n}\n\nexport interface NetworkServicemethods{\n    url:string;\n    data?:object;\n    isAbsoluteUrl?:boolean;\n}\n\nexport enum NetworkServiceMethods{\n    GET='GET',\n    POST='POST'\n}\n\nexport interface MakeRequestMethods{\n    url:string;\n    data?:object;\n    isAbsoluteUrl?:boolean;\n    type:NetworkServiceMethods\n}\n\nlet _makeRequest = async ({url, type, data, isAbsoluteUrl}:MakeRequestMethods) => {\n  let response:any\n\n  try {\n    if (type === 'GET') {\n      response = await _getAxiosInstance({ isAbsoluteUrl }).get(url, { params: data })\n    }\n    \n    if (type === 'POST') {\n      response = await _getAxiosInstance({ isAbsoluteUrl }).post(url, data)\n    }\n\n    if (response.data) {\n      console.log(response.data)\n      if (response.data.success) {\n        return Promise.resolve(response.data.data)\n      } else {\n        return _handleError(response.data.errors)\n      }\n    }\n\n  } catch (error) {\n    return _handleError(error)\n  }\n}\n\nlet _handleError = (error:any) => {\n  return Promise.resolve({\n    'error': error\n    // todo kr - form some model for error\n  })\n}\n\n\n\nlet NetworkService = {\n  get: ({url, data, isAbsoluteUrl}:NetworkServicemethods) => {\n    return _makeRequest({url, type: NetworkServiceMethods.GET, data, isAbsoluteUrl})\n  },\n  post: ({url, data, isAbsoluteUrl}:NetworkServicemethods) => {\n    return _makeRequest({url, type: NetworkServiceMethods.POST, data, isAbsoluteUrl})\n  }\n}\n\nexport default NetworkService\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}