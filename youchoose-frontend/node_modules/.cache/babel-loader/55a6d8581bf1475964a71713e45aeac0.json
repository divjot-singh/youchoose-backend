{"ast":null,"code":"import { getAuth, getRedirectResult, GoogleAuthProvider } from \"firebase/auth\";\nconst FirebaseAuthMethods = {\n  signUpWithGoogle: () => {\n    const auth = getAuth();\n    getRedirectResult(auth).then(result => {\n      // This gives you a Google Access Token. You can use it to access Google APIs.\n      if (result) {\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const token = credential === null || credential === void 0 ? void 0 : credential.accessToken;\n        const user = result.user;\n        console.log(token);\n        console.log(user);\n      }\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message; // The email of the user's account used.\n\n      const email = error.customData.email; // The AuthCredential type that was used.\n\n      const credential = GoogleAuthProvider.credentialFromError(error); // ...\n    });\n  }\n};\nexport default FirebaseAuthMethods;","map":{"version":3,"names":["getAuth","getRedirectResult","GoogleAuthProvider","FirebaseAuthMethods","signUpWithGoogle","auth","then","result","credential","credentialFromResult","token","accessToken","user","console","log","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError"],"sources":["/Users/divjotsingh/Documents/Youchoose/youchoose/src/services/firebaseAuth.tsx"],"sourcesContent":["import React from 'react'\nimport { Auth, getAuth, getRedirectResult, GoogleAuthProvider, OAuthCredential, UserCredential } from \"firebase/auth\";\n\nconst FirebaseAuthMethods = {\n    signUpWithGoogle: () => {\n        const auth : Auth = getAuth();\n        getRedirectResult(auth)\n        .then((result : UserCredential | null) => {\n            // This gives you a Google Access Token. You can use it to access Google APIs.\n            if(result){\n                const credential: OAuthCredential | null = GoogleAuthProvider.credentialFromResult(result);\n                const token = credential?.accessToken;\n                const user = result.user;\n                console.log(token)\n                console.log(user)\n            }\n        }).catch((error) => {\n            // Handle Errors here.\n            const errorCode = error.code;\n            const errorMessage = error.message;\n            // The email of the user's account used.\n            const email = error.customData.email;\n            // The AuthCredential type that was used.\n            const credential = GoogleAuthProvider.credentialFromError(error);\n            // ...\n        });\n    }\n}\n\nexport default FirebaseAuthMethods\n"],"mappings":"AACA,SAAeA,OAAf,EAAwBC,iBAAxB,EAA2CC,kBAA3C,QAAsG,eAAtG;AAEA,MAAMC,mBAAmB,GAAG;EACxBC,gBAAgB,EAAE,MAAM;IACpB,MAAMC,IAAW,GAAGL,OAAO,EAA3B;IACAC,iBAAiB,CAACI,IAAD,CAAjB,CACCC,IADD,CACOC,MAAD,IAAoC;MACtC;MACA,IAAGA,MAAH,EAAU;QACN,MAAMC,UAAkC,GAAGN,kBAAkB,CAACO,oBAAnB,CAAwCF,MAAxC,CAA3C;QACA,MAAMG,KAAK,GAAGF,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEG,WAA1B;QACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB;QACAC,OAAO,CAACC,GAAR,CAAYJ,KAAZ;QACAG,OAAO,CAACC,GAAR,CAAYF,IAAZ;MACH;IACJ,CAVD,EAUGG,KAVH,CAUUC,KAAD,IAAW;MAChB;MACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;MACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHgB,CAIhB;;MACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,UAAN,CAAiBD,KAA/B,CALgB,CAMhB;;MACA,MAAMb,UAAU,GAAGN,kBAAkB,CAACqB,mBAAnB,CAAuCP,KAAvC,CAAnB,CAPgB,CAQhB;IACH,CAnBD;EAoBH;AAvBuB,CAA5B;AA0BA,eAAeb,mBAAf"},"metadata":{},"sourceType":"module"}