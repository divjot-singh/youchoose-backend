[{"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/index.tsx":"1","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/reportWebVitals.ts":"2","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/App.tsx":"3","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/router.tsx":"4","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/providers/userProvider.tsx":"5","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/services/firebaseService.tsx":"6","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/providers/commonComponentsProvider.tsx":"7","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/providers/clubProvider.tsx":"8","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/services/authService.tsx":"9","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/utils/apiEndpoints.tsx":"10","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/services/localstorageService.tsx":"11","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/utils/localstorageKeys.tsx":"12","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/services/networkService.tsx":"13","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/utils/routes.tsx":"14","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/entities/error.tsx":"15","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/entities/user.tsx":"16","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/Login/index.tsx":"17","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/SelectSongs/index.tsx":"18","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/Home/index.tsx":"19","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/SelectClub/index.tsx":"20","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/Register/index.tsx":"21","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/full_screen_loader/index.js":"22","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/snackbar/index.tsx":"23","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/entities/song.tsx":"24","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/entities/club.tsx":"25","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/utils/fuzzySearch.tsx":"26","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/header/index.tsx":"27","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/songItem/index.tsx":"28","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/providers/addedSongsProvider.tsx":"29","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/floating_action_button/index.tsx":"30","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ClubSongsList/index.tsx":"31","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/SuggestedSongs/index.tsx":"32","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/providers/likedSongsProvider.tsx":"33","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/MySongs/index.tsx":"34","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ClubsList/index.tsx":"35","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/clubItem/index.tsx":"36","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/popUp/index.tsx":"37","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ClubsList/components/addClubForm.tsx":"38","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ModeratorsList/index.tsx":"39","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ModeratorsList/component/modTile.tsx":"40","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ModeratorsList/component/addModForm.tsx":"41","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ErrorPage/index.tsx":"42"},{"size":554,"mtime":1662226147600,"results":"43","hashOfConfig":"44"},{"size":425,"mtime":1662120670656,"results":"45","hashOfConfig":"44"},{"size":1101,"mtime":1663596788056,"results":"46","hashOfConfig":"44"},{"size":2813,"mtime":1663764335331,"results":"47","hashOfConfig":"44"},{"size":3312,"mtime":1662292126333,"results":"48","hashOfConfig":"44"},{"size":5304,"mtime":1662941749645,"results":"49","hashOfConfig":"44"},{"size":3245,"mtime":1663689819582,"results":"50","hashOfConfig":"44"},{"size":1423,"mtime":1663235567908,"results":"51","hashOfConfig":"44"},{"size":757,"mtime":1662281870396,"results":"52","hashOfConfig":"44"},{"size":821,"mtime":1663761037405,"results":"53","hashOfConfig":"44"},{"size":405,"mtime":1662282663661,"results":"54","hashOfConfig":"44"},{"size":127,"mtime":1662234531196,"results":"55","hashOfConfig":"44"},{"size":2982,"mtime":1663759223573,"results":"56","hashOfConfig":"44"},{"size":369,"mtime":1663764333313,"results":"57","hashOfConfig":"44"},{"size":281,"mtime":1662283819813,"results":"58","hashOfConfig":"44"},{"size":454,"mtime":1663417436642,"results":"59","hashOfConfig":"44"},{"size":3572,"mtime":1663764373101,"results":"60","hashOfConfig":"44"},{"size":3703,"mtime":1663674019753,"results":"61","hashOfConfig":"44"},{"size":312,"mtime":1662945889518,"results":"62","hashOfConfig":"44"},{"size":5378,"mtime":1663673573559,"results":"63","hashOfConfig":"44"},{"size":2610,"mtime":1662947441617,"results":"64","hashOfConfig":"44"},{"size":399,"mtime":1662239415693,"results":"65","hashOfConfig":"44"},{"size":671,"mtime":1662281539159,"results":"66","hashOfConfig":"44"},{"size":850,"mtime":1663234396698,"results":"67","hashOfConfig":"44"},{"size":229,"mtime":1663684774332,"results":"68","hashOfConfig":"44"},{"size":1075,"mtime":1662299217915,"results":"69","hashOfConfig":"44"},{"size":4563,"mtime":1663764436005,"results":"70","hashOfConfig":"44"},{"size":8562,"mtime":1663597174340,"results":"71","hashOfConfig":"44"},{"size":954,"mtime":1663231664479,"results":"72","hashOfConfig":"44"},{"size":641,"mtime":1663762303914,"results":"73","hashOfConfig":"44"},{"size":3035,"mtime":1663591427468,"results":"74","hashOfConfig":"44"},{"size":3168,"mtime":1663591555337,"results":"75","hashOfConfig":"44"},{"size":2787,"mtime":1663598017627,"results":"76","hashOfConfig":"44"},{"size":1226,"mtime":1663597709597,"results":"77","hashOfConfig":"44"},{"size":6456,"mtime":1663762545999,"results":"78","hashOfConfig":"44"},{"size":5251,"mtime":1663760112756,"results":"79","hashOfConfig":"44"},{"size":663,"mtime":1663758485511,"results":"80","hashOfConfig":"44"},{"size":1268,"mtime":1663759605855,"results":"81","hashOfConfig":"44"},{"size":5715,"mtime":1663763302813,"results":"82","hashOfConfig":"44"},{"size":1226,"mtime":1663763238316,"results":"83","hashOfConfig":"44"},{"size":942,"mtime":1663762455476,"results":"84","hashOfConfig":"44"},{"size":323,"mtime":1663764399433,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"11g4fur",{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"89"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"89"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/index.tsx",[],[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/reportWebVitals.ts",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/App.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/router.tsx",["228"],[],"import React from 'react'\nimport { Route, BrowserRouter as Router, Routes, Outlet, Navigate, useLocation } from 'react-router-dom';\nimport { UserType } from './entities/user';\nimport ClubsList from './pages/ClubsList';\nimport ClubSongsList from './pages/ClubSongsList';\nimport ErrorPage from './pages/ErrorPage';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport ModeratorsList from './pages/ModeratorsList';\nimport MySongs from './pages/MySongs';\nimport Register from './pages/Register';\nimport SelectClub from './pages/SelectClub';\nimport SelectSongs from './pages/SelectSongs';\nimport SuggestedSongsList from './pages/SuggestedSongs';\nimport { useAuth } from './providers/userProvider';\nimport { RoutesKeys } from './utils/routes';\n\nconst DjProtectedRoute = (props:any) => {\n    const {user} = useAuth()\n    const location = useLocation()\n    return user && user.user_type === UserType.DJ ? <Outlet /> : <Navigate to={RoutesKeys.LOGIN} state={{from:location.pathname}} />\n}\n\nconst ModeratorProtectedRoute = (props:any) => {\n    const {user} = useAuth()\n    const location = useLocation()\n    return user && user.user_type === UserType.MODERATOR ? <Outlet /> : <Navigate to={RoutesKeys.LOGIN} state={{from:location.pathname}} />\n}\n\nconst UserProtectedRoute = (props:any) => {\n    const {user} = useAuth()\n    const location = useLocation()\n    return user && user.user_type === UserType.USER ? <Outlet /> : <Navigate to={RoutesKeys.LOGIN} state={{from:location.pathname}} />\n}\n\n\nconst AppRouter = () => {\n    return (\n    <Router>\n        <Routes>\n            <Route path={RoutesKeys.ROOT} element={<DjProtectedRoute />}>\n                <Route path={RoutesKeys.SUGGESTED_SONG_LIST} element={<SuggestedSongsList />} />\n            </Route>\n            <Route path={RoutesKeys.ROOT} element={<UserProtectedRoute />}>\n                <Route path={RoutesKeys.MY_SONGS} element={<MySongs />} />\n            </Route>\n            <Route path={RoutesKeys.ROOT} element={<ModeratorProtectedRoute />}>\n                <Route path={RoutesKeys.CLUBS_LIST} element={<ClubsList />} />\n                <Route path={RoutesKeys.MODERATORS_LIST} element={<ModeratorsList />} />\n            </Route>\n            <Route path={RoutesKeys.LOGIN} element={<Login />} />\n            <Route path={RoutesKeys.REGISTER} element={<Register />} />\n            <Route path={RoutesKeys.CLUB_SONG_LIST} element={<ClubSongsList />} />\n            <Route path={RoutesKeys.SELECT_CLUB} element={<SelectClub />} />\n            <Route path={RoutesKeys.SELECT_SONGS} element={<SelectSongs />} />\n            <Route path={RoutesKeys.ERROR_PAGE} element={<ErrorPage />} />\n            <Route path=\"*\" element={<Navigate to={RoutesKeys.ERROR_PAGE} replace />} />\n        </Routes>\n    </Router>\n  )\n}\n\nexport default AppRouter","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/providers/userProvider.tsx",["229"],[],"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { SnackbarTypes } from \"../components/snackbar\";\nimport {Error as AppError, instanceOfError} from \"../entities/error\";\nimport User, { instanceOfUser } from \"../entities/user\";\nimport Authenticate, { AuthType } from \"../services/authService\";\nimport { GetCurrentUser, Logout, SaveUserToLocalStorage } from \"../services/firebaseService\";\nimport NetworkService from \"../services/networkService\";\nimport { API_ENDPOINTS } from \"../utils/apiEndpoints\";\nimport { CommonComponentsContextValue, useCommonComponents } from \"./commonComponentsProvider\";\n\ninterface UserContextWrapperProps{\n    children: JSX.Element | null,\n    isAppInitialised: boolean\n}\nexport interface UserContextValue{\n    user: User | null;\n    authenticate: (authType: AuthType, email?:string, password?:string, username?:string) => Promise<void>\n    signOut: () => Promise<void>\n}\nconst UserContext = createContext<UserContextValue>({\n    user:null,\n    authenticate:async (authType) => {},\n    signOut:async () => {}\n})\nexport const UserContextWrapper = ({children,isAppInitialised}: UserContextWrapperProps) => {\n    const [user, setUser] = useState<User | null>(null)\n    const commonComponents:CommonComponentsContextValue = useCommonComponents()\n    const setInitialUser = async () => {\n        commonComponents.showLoader(null)\n        const currentUser:User | null | AppError= await GetCurrentUser()\n        if(instanceOfUser(currentUser)){\n            const appUser: User | null | AppError = await NetworkService.post({url:API_ENDPOINTS.registerUser, data:currentUser})\n            if(instanceOfUser(appUser)){\n                SaveUserToLocalStorage(appUser)\n                setUser(appUser)\n            }\n        }\n        else if(instanceOfError(currentUser)){\n            commonComponents.showSnackbar({children:<span>{currentUser.message}</span>,type:SnackbarTypes.ERROR})\n        }\n        commonComponents.hideLoader()\n    }\n    useEffect(() => {\n        if(isAppInitialised){\n            setInitialUser()\n        }\n    },[isAppInitialised])\n    const authenticate = async (authType:AuthType, email?:string, password?:string, username?:string) => {\n        commonComponents.showLoader(null)\n        const result:User | null | AppError = await Authenticate(authType, email, password, username);\n        if(instanceOfUser(result)){\n            const appUser: User | null | AppError = await NetworkService.post({url:API_ENDPOINTS.registerUser, data:result})\n            console.log(appUser)\n            if(instanceOfUser(appUser)){\n                SaveUserToLocalStorage(appUser)\n                setUser(appUser)\n            }\n        }\n        else if(instanceOfError(result)){\n            commonComponents.showSnackbar({children:<span>{result.message}</span>,type:SnackbarTypes.ERROR})\n        }\n        commonComponents.hideLoader()\n    }\n    const signOut = async () => {\n        commonComponents.showLoader(null)\n        await Logout()\n        commonComponents.hideLoader()\n        setUser(null)\n    }\n    return (\n        <UserContext.Provider value={{\n            user,\n            authenticate,\n            signOut\n        }}>\n            {children}\n        </UserContext.Provider>\n    )    \n}\n\n\n\nexport const useAuth = () => useContext(UserContext)","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/services/firebaseService.tsx",["230","231","232","233","234","235","236","237"],[],"import React from 'react'\nimport { Auth, getAuth, getRedirectResult, GoogleAuthProvider, OAuthCredential, signInWithPopup, signInWithCredential, UserCredential, User as FirebaseUser, signOut, EmailAuthProvider, createUserWithEmailAndPassword, EmailAuthCredential, signInWithEmailAndPassword, getIdTokenResult, IdTokenResult, signInWithCustomToken } from \"firebase/auth\";\nimport { FirebaseError, initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport User, { UserType } from '../entities/user';\nimport { LocalStorageKeys } from '../utils/localstorageKeys';\nimport LocalStorageMethods from './localstorageService';\nimport { useCommonComponents } from '../providers/commonComponentsProvider';\nimport { ErrorCodeStrings } from '../utils/errorCodeStrings';\nimport {Error} from '../entities/error';\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_API_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\n\nconsole.log(firebaseConfig)\n\nexport const InitialiseFirebaseApp = () => {\n    const app = initializeApp(firebaseConfig);\n    const analytics = getAnalytics(app);\n    return true\n}\n\nconst getUser = (firebaseUser:FirebaseUser, userType:UserType, token:string):User => {\n    const user:User = {\n        display_name: firebaseUser.displayName || '',\n        email: firebaseUser.email || '',\n        photo_url: firebaseUser.photoURL || '',\n        uid: firebaseUser.uid,\n        user_type: userType,\n        token: token\n    } \n\n    return user;\n}\n\nexport const SaveUserToLocalStorage = (user:User) => {\n    LocalStorageMethods.set(LocalStorageKeys.user_id, user.uid)\n    LocalStorageMethods.set(LocalStorageKeys.token, user.token)\n    LocalStorageMethods.set(LocalStorageKeys.type, user.user_type)\n}\n\nexport const RemoveUserFromLocalStorage = () => {\n    LocalStorageMethods.delete(LocalStorageKeys.user_id)\n    LocalStorageMethods.delete(LocalStorageKeys.token)\n    LocalStorageMethods.delete(LocalStorageKeys.type)\n}\n\nexport const getError = (err:FirebaseError | any) => {\n    const error:Error = {\n        code: err.code,\n        message: err.message\n    }\n    console.error(err)\n    return error\n}\n\nexport const GetCurrentUser = async (): Promise<User | null | Error> => {\n    try{\n        const auth : Auth = getAuth();\n        const token:string = LocalStorageMethods.get(LocalStorageKeys.token) ?? ''\n        if(token){\n            const result: UserCredential | null = await signInWithCustomToken(auth, token)\n            if(result){\n                const user = getUser(result.user, UserType.USER, token || '');\n                return user;\n            }\n            return null;\n        }\n        return null\n    } catch(err) {\n        return getError(err);\n    } \n}\n\nexport const SignUpWithGoogle = async (): Promise<User | null | Error> => {\n        const auth : Auth = getAuth();\n        const provider:GoogleAuthProvider = new GoogleAuthProvider();\n        try{\n            const result: UserCredential | null = await signInWithPopup(auth, provider)\n            if(result){\n                const credential: OAuthCredential | null = GoogleAuthProvider.credentialFromResult(result);\n                const token = credential?.accessToken;\n                const user = getUser(result.user, UserType.USER, token || '');\n                SaveUserToLocalStorage(user);\n                return user;\n            }\n            return null;\n        } catch(err){\n            return getError(err);\n        }\n}\n\nexport const Register = async (email?:string, password?:string, username?:string):Promise<User | null | Error> =>{\n    if(!email || !password) return null\n    const auth : Auth = getAuth();\n    \n    try{\n        const result: UserCredential | null = await createUserWithEmailAndPassword(auth, email, password)\n        if(result){\n            const idToken = getIdTokenResult(result.user)\n            console.log(idToken)\n            const credential: OAuthCredential | null = GoogleAuthProvider.credentialFromResult(result);\n            const token = credential?.accessToken;\n            const user = getUser(result.user, UserType.USER, token || '');\n            return user;\n        }\n        return null\n    } catch(err:FirebaseError | any){\n        return getError(err);\n    }\n}\n\nexport const LoginWithEmail = async (email?:string, password?:string): Promise<User | null | Error> => {\n    if(!email || !password) return null\n    const auth : Auth = getAuth();\n    \n    try{\n        const result: UserCredential | null = await signInWithEmailAndPassword(auth, email, password)\n        if(result){\n            const idToken:IdTokenResult = await getIdTokenResult(result.user)\n            const user = getUser(result.user, UserType.USER, idToken.token || '');\n            return user;\n        }\n        return null\n    } catch(err:FirebaseError | any){\n        return getError(err);\n    }\n}\n\nexport const Logout = async () => {\n    const auth : Auth = getAuth();\n    await signOut(auth)\n    RemoveUserFromLocalStorage()\n}","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/providers/commonComponentsProvider.tsx",["238"],[],"import { type } from '@testing-library/user-event/dist/type'\nimport React, {\n    createContext,\n    useContext,\n    useState,\n} from 'react'\nimport FullScreenLoader from '../components/full_screen_loader'\nimport Popup from '../components/popUp'\nimport Snackbar, { SnackbarTypes } from '../components/snackbar'\n\n\nexport interface LoaderData{\n    children:JSX.Element | null,\n    text:string | null\n}\n\nexport interface PopupData{\n  children:JSX.Element | null;\n  overlayClassName?:string;\n  className?:string;\n}\nexport interface SnackbarData{\n  children:JSX.Element | null | undefined,\n  duration?:number,\n  type?:SnackbarTypes,\n  hideSnackbar?:() => void\n}\n\nexport interface CommonComponentsContextValue{\n    showLoader:(data:LoaderData | null) => void,\n    hideLoader:() => void,\n    hideSnackbar:() => void,\n    showSnackbar:(data:SnackbarData) => void,\n    showPopup:(data:PopupData) => void,\n    hidePopup:() => void\n}\nconst CommonComponentsContext = createContext<CommonComponentsContextValue>({\n    showLoader:(data:LoaderData | null) => {},\n    hideLoader:() => {},\n    hideSnackbar:() => {},\n    showSnackbar:(data:SnackbarData) => {},\n    showPopup:(data:PopupData) => {},\n    hidePopup:() => {}\n})\n\nexport const CommonComponentsProvider = ({ children}:{children:JSX.Element | null}) => {\n    const [loaderData, setLoaderData] = useState<LoaderData | null>(null)  \n    const [snackbarData, setSnackbarData] = useState<SnackbarData | null>(null)\n    const [popupData, setPopupData] = useState<PopupData | null>(null)\n\n    const showPopup = (popupData:PopupData) => {\n      setPopupData(popupData)\n    }\n    const hidePopup = () => {\n      setPopupData(null)\n    }\n    const showLoader = (data:LoaderData | null) => {\n      const { children = null, text = null } = data || {}\n      setLoaderData({\n        children,\n        text,\n      })\n    }\n  \n    const hideLoader = () => {\n      setLoaderData(null)\n    }\n    \n    const showSnackbar = ({\n      children = null,\n      type = SnackbarTypes.SUCCESS,\n      duration = 3000,\n    }:SnackbarData) => {\n      setSnackbarData({\n        children,\n        type,\n        duration,\n      })\n    }\n  \n    const hideSnackbar = () => {\n      setSnackbarData(null)\n    }\n  \n    let { children: loaderChild, text } = loaderData || {}\n\n    let {children: snackbarChild, duration, type} = snackbarData || {}\n    let {children: popupChild = null, className = '', overlayClassName = ''} = popupData || {}\n    return (\n      <CommonComponentsContext.Provider\n        value={{\n          showLoader,\n          hideLoader,\n          showSnackbar,\n          hideSnackbar,\n          showPopup,\n          hidePopup\n        }}\n      >\n        {snackbarData && (\n        <Snackbar type={type} duration={duration} hideSnackbar={hideSnackbar}>\n          {snackbarChild}\n        </Snackbar>\n      )}\n        {loaderData && (\n          <FullScreenLoader text={text}>{loaderChild}</FullScreenLoader>\n        )}\n        {popupData && (\n            <Popup overlayClassName={overlayClassName} className={className} onClose={hidePopup}>{popupChild}</Popup>\n        )}\n        {children}\n      </CommonComponentsContext.Provider>\n    )\n  }\n  \n  export const useCommonComponents = () => useContext(CommonComponentsContext)\n  ","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/providers/clubProvider.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/services/authService.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/utils/apiEndpoints.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/services/localstorageService.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/utils/localstorageKeys.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/services/networkService.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/utils/routes.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/entities/error.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/entities/user.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/Login/index.tsx",["239","240"],[],"import React, { ChangeEvent, ChangeEventHandler, FormEvent, FormEventHandler, useEffect, useState } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { AuthType } from '../../services/authService'\nimport './index.scss'\nimport { useAuth, UserContextValue } from '../../providers/userProvider'\nimport Header from '../../components/header'\nimport { RoutesKeys } from '../../utils/routes'\nimport { instanceOfUser, UserType } from '../../entities/user'\nimport { useClub } from '../../providers/clubProvider'\nimport { useLikedSongs } from '../../providers/likedSongsProvider'\n\n\nconst Login = () => {\n    const {authenticate, user}:UserContextValue = useAuth()\n    const location = useLocation(), navigate = useNavigate()\n    const {initialiseLikedSongs} = useLikedSongs()\n    const [email, setEmail] = useState<string>('')\n    const [password, setPassword] = useState<string>('')\n    const {setClub} = useClub()\n    const redirectToRouteIfAny = () => {\n        const state:any = location.state || {}\n        if(user?.user_type === UserType.USER){\n            initialiseLikedSongs()\n            navigate(RoutesKeys.SELECT_CLUB)\n        } else if(user?.user_type === UserType.DJ && user.club){\n            setClub(user.club)\n            navigate(RoutesKeys.CLUB_SONG_LIST)\n        }\n        else if(user?.user_type === UserType.MODERATOR) {\n            navigate(RoutesKeys.CLUBS_LIST)\n        }\n        else if(state['from'] && state['from'] !== '/'){\n            navigate(state['from'])\n        } else{\n            navigate(RoutesKeys.ERROR_PAGE)\n        }\n    }\n    useEffect(() => {\n        if(user){\n            redirectToRouteIfAny()\n        }\n    },[user])\n    const signUpWithGoogle = () => {\n        authenticate(AuthType.Google)\n    }\n\n    const handleEmailChange:ChangeEventHandler<HTMLInputElement> = (event:ChangeEvent<HTMLInputElement>) => {\n        setEmail(event.target.value)\n    }\n\n\n    const handlePwChange:ChangeEventHandler<HTMLInputElement> = (event:ChangeEvent<HTMLInputElement>) => {\n        setPassword(event.target.value)\n    }\n\n    const handleSubmit:FormEventHandler<HTMLFormElement> = (event:FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        authenticate(AuthType.Email, email, password)\n    }\n    const continueWithoutSigning = () => {\n        navigate(RoutesKeys.SELECT_CLUB)\n    }\n    return (\n        <>\n            <Header pageName='Login' />\n            <div className='login-container container content'>\n                <form className='signin-form' onSubmit={handleSubmit}>\n                    <label className='label' htmlFor='email'>Email</label>\n                    <input type='email' placeholder='Email' name='email' id='email' value={email} onChange={handleEmailChange} required />\n                    <label className='label' htmlFor='password'>Password</label>\n                    <input type='password' placeholder='Password' name='password' id='password' value={password} onChange={handlePwChange} required />\n                    <button>Sign In</button>\n                </form>\n                <div className='register-line'>Don't have an account? <span onClick={() => navigate(RoutesKeys.REGISTER)}>Register.</span></div>\n                <div className='or'>Or</div>\n                <button onClick={signUpWithGoogle} className='google-signup-button'>Sign up with google</button>\n                <div className='or'>Or</div>\n                <button onClick={continueWithoutSigning}>Continue without Signing in</button>\n            </div>\n        </>\n    )\n}\n\nexport default Login","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/SelectSongs/index.tsx",["241","242"],[],"import React, {  useEffect, useState } from 'react'\nimport Header from '../../components/header'\nimport { useDebounce } from 'usehooks-ts'\nimport './index.scss'\nimport { useCommonComponents } from '../../providers/commonComponentsProvider'\nimport NetworkService from '../../services/networkService'\nimport { API_ENDPOINTS } from '../../utils/apiEndpoints'\nimport Song, { getSongFromMap } from '../../entities/song'\nimport { SnackbarTypes } from '../../components/snackbar'\nimport SongItem from '../../components/songItem'\nimport './index.scss'\nimport { FaSearch } from 'react-icons/fa'\nimport FloatingActionButton, { FabPosition } from '../../components/floating_action_button'\nimport { useNavigate } from 'react-router-dom'\nimport { RoutesKeys } from '../../utils/routes'\nimport { useAuth } from '../../providers/userProvider'\nimport { UserType } from '../../entities/user'\nimport { useClub } from '../../providers/clubProvider'\n\n\nconst SelectSongs = () => {\n    const [query, setQuery] = useState<string>('')\n    const debouncedValue = useDebounce<string>(query, 500)\n    const [songs, setSongs] = useState<Song[]>([])\n    const {user} = useAuth()\n    const {club, setClub} = useClub()\n    const navigate = useNavigate()\n    const {showLoader,hideLoader, showSnackbar} = useCommonComponents()\n    const fetchSongs =  async (text:string) => {\n        showLoader(null)\n        try{\n            const data = await NetworkService.get({url:`${API_ENDPOINTS.youtubeBaseUrl}${API_ENDPOINTS.youtubeSearch}`, isAbsoluteUrl:true, isYoutubeApiUrl:true, data:{\n                q:text\n            }})\n           hideLoader()\n            const songsResult:Song[] = data?.map((songItem:any) => {\n                return getSongFromMap(songItem)\n            })\n            setSongs(songsResult)\n        } catch(err){\n            console.error(err)\n            showSnackbar({\n                children:<span>Cound not fetch songs</span>,\n                type:SnackbarTypes.ERROR\n            })\n        }\n        \n    }\n    useEffect(() => {\n        if(debouncedValue?.length){\n            fetchSongs(debouncedValue)\n        }\n    },[debouncedValue])\n\n    useEffect(() => {\n        if(!user){\n            if(!club){\n                navigate(RoutesKeys.SELECT_CLUB)\n            }\n        } else if(user.user_type === UserType.DJ && user.club){\n            setClub(user.club)\n            navigate(RoutesKeys.CLUB_SONG_LIST)\n        }\n    },[user,club])\n\n    const getSongsResults = () => {\n        if(debouncedValue.length && songs.length){\n            return songs.map((songItem) => <SongItem song={songItem} key={songItem.videoId} />)\n        } else if(debouncedValue.length && !songs.length){\n            return <p className='no-songs'>No songs found</p>\n        }\n    }\n    return (\n        <>\n            <Header pageName='Select songs' showBackButton={true} />\n            <div className='songs-container container content'>\n                <div className='input-container'><input name='search' id='search' className='search-input' placeholder='Search a song' value={query} onChange={e => setQuery(e.target.value)} /><span className='icon' onClick={() => fetchSongs(debouncedValue)}><FaSearch color='white' size={20} /></span></div>\n                <div className='song-list'>{getSongsResults()}</div>\n            </div>\n            <FloatingActionButton position={FabPosition.right} onClick={() => navigate(RoutesKeys.CLUB_SONG_LIST)}>SongsList</FloatingActionButton>\n            { user && user.user_type === UserType.USER ? <FloatingActionButton position={FabPosition.left} onClick={() => navigate(RoutesKeys.MY_SONGS)}>My songs</FloatingActionButton> : null}        \n        </>\n    )\n}\n\nexport default SelectSongs","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/Home/index.tsx",["243"],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/SelectClub/index.tsx",["244","245","246"],[],"import React, { useEffect, useState } from 'react'\nimport Header from '../../components/header'\nimport Club, { instanceOfClub } from '../../entities/club'\nimport { Error as AppError } from '../../entities/error'\nimport NetworkService from '../../services/networkService'\nimport { API_ENDPOINTS } from '../../utils/apiEndpoints'\nimport SelectSearch from 'react-select-search';\nimport 'react-select-search/style.css'\nimport './index.scss'\nimport {fuzzySearchWrapper} from '../../utils/fuzzySearch'\nimport { useClub } from '../../providers/clubProvider'\nimport {SelectedOptionValue, SelectedOption, SelectSearchProps} from 'react-select-search'\nimport { useCommonComponents } from '../../providers/commonComponentsProvider'\nimport {  useNavigate } from 'react-router-dom'\nimport { RoutesKeys } from '../../utils/routes'\nimport { SnackbarTypes } from '../../components/snackbar'\nimport { useAuth } from '../../providers/userProvider'\nimport Song, { instanceOfSong } from '../../entities/song'\nimport { useAddedSongs } from '../../providers/addedSongsProvider'\nimport { UserType } from '../../entities/user'\n\n\nconst SelectClub = () => {\n    const [clubs, setClubs] = useState<Club[]>([])\n    const {showLoader,hideLoader, showSnackbar} = useCommonComponents()\n    const navigate = useNavigate()\n    let isFetchingClubs = false\n    const fetchClubs = async () => {\n        if(isFetchingClubs) return\n        showLoader(null)\n        isFetchingClubs = true\n        try{\n            const clubsResponse: Club[] | null | AppError = await NetworkService.get({url:API_ENDPOINTS.fetchClubs})\n            hideLoader()\n            if(Array.isArray(clubsResponse) && instanceOfClub(clubsResponse[0])){\n                setClubs(clubsResponse)\n            } else {\n                showSnackbar({\n                    children:<span>Cound not fetch clubs</span>,\n                    type:SnackbarTypes.ERROR\n                })\n            }\n        } catch(err){\n            hideLoader()\n            console.error(err)\n            showSnackbar({\n                children:<span>Cound not fetch clubs</span>,\n                type:SnackbarTypes.ERROR\n            })\n            \n        }\n    }\n    const {club, setClub} = useClub()\n    const {user} = useAuth()\n    const {updateAddedSongs} = useClub()\n    const { updateSongs } = useAddedSongs()\n    useEffect(() => {\n        fetchClubs()\n    },[])\n    useEffect(() => {\n        if(user && user.user_type === UserType.DJ && user.club){\n            setClub(user.club)\n            navigate(RoutesKeys.CLUB_SONG_LIST)\n        }\n    },[user])\n    const options = clubs.map((club) => {\n        return {\n            name:club.clubName,\n            value:club.clubId\n        }\n    })\n    const handleChange = (value:SelectedOptionValue | SelectedOptionValue[], selectedOption: SelectedOption | SelectedOption[], optionSnapshot: SelectSearchProps) => {\n        let clubId = Array.isArray(value) ? value[0].toString() : value.toString()\n        let selectedClub= clubs.find((club) => club.clubId === clubId)\n        if(selectedClub){\n            setClub(selectedClub)\n        }\n    }\n    const fetchUserSuggestedSongs = async () => {\n        if(!user || !user.uid) return\n        const data = await NetworkService.get({\n            url: API_ENDPOINTS.userSuggestedSong,\n            data:{\n                clubId:club?.clubId,\n                userId:user.uid\n            }\n        })\n        if(Array.isArray(data)){\n            if(instanceOfSong(data[0])) updateAddedSongs(data)\n        } else {\n            showSnackbar({\n                children:<span>Cound not fetch user suggested songs</span>,\n                type:SnackbarTypes.ERROR\n            })\n            return Promise.reject('Could not fetch user suggested songs')\n        }\n    }\n    const fetchClubSongs = async () => {\n        const data = await NetworkService.get({\n            url: API_ENDPOINTS.clubSongs,\n            data:{\n                clubId:club?.clubId,\n            }\n        })\n        if(Array.isArray(data)){\n            if(instanceOfSong(data[0])) updateSongs(data)\n        } else {\n            showSnackbar({\n                children:<span>Cound not fetch club songs</span>,\n                type:SnackbarTypes.ERROR\n            })\n            return Promise.reject('Cound not fetch club songs')\n        }\n    }\n    const onNextClick = async() => {\n        showLoader(null)\n        try{\n            await fetchUserSuggestedSongs()\n            await fetchClubSongs()\n            hideLoader()\n            navigate(RoutesKeys.SELECT_SONGS)\n        } catch (err){\n            hideLoader()\n            console.error(err)\n            showSnackbar({\n                children:<span>{typeof err === 'string' ? err : 'Something went wrong'}</span>,\n                type:SnackbarTypes.ERROR\n            })\n        }\n    }\n    return (\n        <>\n            <Header pageName='Select Club' />\n            <div className='clubs-container container content'>\n                <p className='page-header'>Choose your club</p>\n                <SelectSearch options={options} placeholder=\"Choose your club\" search={true} value={club?.clubId} closeOnSelect={true} onChange={handleChange} filterOptions={fuzzySearchWrapper} />\n                <button disabled={!club} className='select-button' onClick={onNextClick}>Select</button>\n            </div>\n        </>\n    )\n}\n\nexport default SelectClub","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/Register/index.tsx",["247","248"],[],"import React, { ChangeEvent, ChangeEventHandler, FormEvent, FormEventHandler, useEffect, useState } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport Header from '../../components/header'\nimport { UserContextValue, useAuth } from '../../providers/userProvider'\nimport { AuthType } from '../../services/authService'\nimport { RoutesKeys } from '../../utils/routes'\n\nconst Register = () => {\n    const [email, setEmail] = useState<string>()\n    const navigate = useNavigate()\n    const [password, setPassword] = useState<string>()\n    const [username, setUsername] = useState<string>()\n    \n    const {authenticate, user}:UserContextValue = useAuth()\n    const redirectToRouteIfAny = () => {\n        navigate(RoutesKeys.SELECT_CLUB)\n    }\n    useEffect(() => {\n        if(user){\n            redirectToRouteIfAny()\n        }\n    },[user])\n\n    const handleEmailChange:ChangeEventHandler<HTMLInputElement> = (event:ChangeEvent<HTMLInputElement>) => {\n        setEmail(event.target.value)\n    }\n\n\n    const handlePwChange:ChangeEventHandler<HTMLInputElement> = (event:ChangeEvent<HTMLInputElement>) => {\n        setPassword(event.target.value)\n    }\n\n    const handleNameChange:ChangeEventHandler<HTMLInputElement> = (event:ChangeEvent<HTMLInputElement>) => {\n        setUsername(event.target.value)\n    }\n\n    const handleSubmit:FormEventHandler<HTMLFormElement> = (event:FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        authenticate(AuthType.Register, email, password, username)\n    }\n    return (\n        <>\n        <Header pageName='Register' />\n        <div className='login-container container content'>\n            <form className='signin-form' onSubmit={handleSubmit}>\n                <label className='label' htmlFor='name'>Username</label>\n                <input type='text' placeholder='Name' name='name' id='name' value={username} onChange={handleNameChange} required />\n                <label className='label' htmlFor='email'>Email</label>\n                <input type='email' placeholder='Email' name='email' id='email' value={email} onChange={handleEmailChange} required />\n                <label className='label' htmlFor='password'>Password</label>\n                <input type='password' placeholder='Password' name='password' id='password' value={password} onChange={handlePwChange} required />\n                <button>Sign Up</button>\n            </form>\n            <div className='login-line'>Already have an account? <span onClick={() => navigate(RoutesKeys.LOGIN)}>Login.</span></div>\n        </div>\n    </>\n    )\n}\n\nexport default Register","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/full_screen_loader/index.js",[],[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/snackbar/index.tsx",["249"],[],"import React, { useEffect } from 'react'\nimport { SnackbarData } from '../../providers/commonComponentsProvider'\nimport './index.scss'\n\n\nexport enum SnackbarTypes {\n  ERROR = 'error',\n  SUCCESS= 'success',\n  INFO= 'info'\n}\n\nconst Snackbar = ({\n  type = SnackbarTypes.SUCCESS,\n  duration = 5000,\n  children,\n  hideSnackbar,\n}:SnackbarData) => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      hideSnackbar?.()\n    }, duration)\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [])\n\n  return (\n    <div className=\"snackbar-container\">\n      <div className={`snackbar ${type}`}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default Snackbar\n","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/entities/song.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/entities/club.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/utils/fuzzySearch.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/header/index.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/songItem/index.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/providers/addedSongsProvider.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/floating_action_button/index.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ClubSongsList/index.tsx",["250"],[],"import React, { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport FloatingActionButton, { FabPosition } from '../../components/floating_action_button'\nimport Header from '../../components/header'\nimport { SnackbarTypes } from '../../components/snackbar'\nimport SongItem from '../../components/songItem'\nimport { instanceOfSong } from '../../entities/song'\nimport { UserType } from '../../entities/user'\nimport { useAddedSongs } from '../../providers/addedSongsProvider'\nimport { useClub } from '../../providers/clubProvider'\nimport { useCommonComponents } from '../../providers/commonComponentsProvider'\nimport { useAuth } from '../../providers/userProvider'\nimport NetworkService from '../../services/networkService'\nimport { API_ENDPOINTS } from '../../utils/apiEndpoints'\nimport { RoutesKeys } from '../../utils/routes'\nimport './index.scss'\n\nconst ClubSongsList = () => {\n    const {club} = useClub()\n    const navigate = useNavigate()\n    const {songs} = useAddedSongs()\n    const {user} = useAuth()\n    const {updateSongs} = useAddedSongs()\n    const {showSnackbar, showLoader, hideLoader} = useCommonComponents()\n    const fetchClubSongs = async () => {\n        showLoader(null)\n        try{\n            const data = await NetworkService.get({\n                url: API_ENDPOINTS.clubSongs,\n                data:{\n                    clubId:club?.clubId,\n                }\n            })\n            hideLoader()\n            if(Array.isArray(data)){\n                if(instanceOfSong(data[0])) updateSongs(data)\n            } else {\n                showSnackbar({\n                    children:<span>Cound not fetch club songs</span>,\n                    type:SnackbarTypes.ERROR\n                })\n            }\n        } catch(err){\n            hideLoader()\n            showSnackbar({\n                children:<span>Cound not fetch club songs</span>,\n                type:SnackbarTypes.ERROR\n            })\n        }\n    }\n    useEffect(() => {\n        if(!club){\n            navigate(RoutesKeys.SELECT_CLUB, {\n                replace:true\n            })\n        } else{\n            fetchClubSongs()\n        }\n    },[])\n    const getSongs = () => {\n        if(songs.length){\n            return songs.map((song) => <SongItem song={song} key={song.videoId} canUserRemoveSong={!!user && user.user_type === UserType.DJ}/> )\n        } else{\n            return <div className='empty-state'>No songs added yet</div>\n        }\n    }\n    const showSuggestedSongs = () => {\n        navigate(RoutesKeys.SUGGESTED_SONG_LIST)\n    }\n    return (\n        <>\n            <Header pageName={`Songs list for ${club?.clubName}`} showBackButton={user?.user_type !== UserType.DJ} />\n            <div className='songs-list-container container content'>\n                {getSongs()}\n            </div>\n            {user?.user_type === UserType.DJ && <FloatingActionButton position={FabPosition.left} onClick={showSuggestedSongs}>Show suggested songs</FloatingActionButton>}\n        </>\n    )\n}\n\nexport default ClubSongsList","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/SuggestedSongs/index.tsx",["251"],[],"import React, { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport Header from '../../components/header'\nimport { SnackbarTypes } from '../../components/snackbar'\nimport SongItem from '../../components/songItem'\nimport Song from '../../entities/song'\nimport { UserType } from '../../entities/user'\nimport { useClub } from '../../providers/clubProvider'\nimport { useCommonComponents } from '../../providers/commonComponentsProvider'\nimport { useAuth } from '../../providers/userProvider'\nimport NetworkService from '../../services/networkService'\nimport { API_ENDPOINTS } from '../../utils/apiEndpoints'\nimport { RoutesKeys } from '../../utils/routes'\nimport './index.scss'\n\nconst SuggestedSongsList = () => {\n    const {club} = useClub()\n    const {user} = useAuth()\n    const navigate = useNavigate()\n    const [songsList, setSongsList] = useState<Song[]>([])\n    const {showLoader, showSnackbar, hideLoader} = useCommonComponents()\n    const fetchSuggestedSongsList = async () => {\n        try{\n            showLoader(null)\n            const songsResponse = await NetworkService.get({\n                url:API_ENDPOINTS.suggestedSongsList,\n                data:{ clubId:club?.clubId}\n            })\n            hideLoader()\n            if(Array.isArray(songsResponse)) setSongsList(songsResponse)\n            else{\n                console.error(songsResponse)\n                showSnackbar({\n                    children:<span>Cound not fetch suggested songs</span>,\n                    type:SnackbarTypes.ERROR\n                })\n            }\n        } catch(e){\n            hideLoader()\n            showSnackbar({\n                children:<span>Cound not fetch suggested songs</span>,\n                type:SnackbarTypes.ERROR\n            })\n        }\n    }\n    useEffect(() => {\n        if(!club){\n            navigate(RoutesKeys.SELECT_CLUB, {\n                replace:true\n            })\n        } else{\n            fetchSuggestedSongsList()\n        }\n    },[])\n    const onSongAddition = async (removableSong:Song) => {\n        try{\n            setSongsList(songsList.filter((song:Song) => {\n                return song.videoId !== removableSong.videoId\n            }))\n            await NetworkService.post({\n                url:API_ENDPOINTS.removeSongsFromSuggestion,\n                data:{\n                    songId:removableSong.videoId,\n                    clubId:club?.clubId\n                }\n            })\n        } catch(err){\n            console.error(err)\n        }\n    }\n    const getSongs = () => {\n        if(songsList.length){\n            return songsList.map((song) => <SongItem song={song} key={song.videoId} onSongAddition={onSongAddition} canUserRemoveSong={!user || user?.user_type === UserType.USER }/> )\n        } else{\n            return <div className='empty-state'>No songs added yet</div>\n        }\n    }\n    return (\n        <>\n            <Header pageName={`Suggested songs for ${club?.clubName}`} showBackButton={true} />\n            <div className='songs-list-container container content'>\n                {getSongs()}\n            </div>\n        </>\n    )\n}\n\nexport default SuggestedSongsList","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/providers/likedSongsProvider.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/MySongs/index.tsx",["252"],[],"import React, { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport Header from '../../components/header'\nimport SongItem from '../../components/songItem'\nimport { UserType } from '../../entities/user'\nimport { useLikedSongs } from '../../providers/likedSongsProvider'\nimport { useAuth } from '../../providers/userProvider'\nimport { RoutesKeys } from '../../utils/routes'\nimport './index.scss'\n\nconst MySongs = () => {\n    const {user } = useAuth()\n    const navigate = useNavigate()\n    const {likedSongs} = useLikedSongs()\n    useEffect(() => {\n        if(user && user.user_type !== UserType.USER){\n            navigate(RoutesKeys.SELECT_CLUB)\n        }\n    },[user])\n    const getSongs = () => {\n        if(likedSongs.length){\n            return likedSongs.map((song) => <SongItem song={song} key={song.videoId} canUserRemoveSong={false}/> )\n        } else{\n            return <div className='empty-state'>No songs liked yet</div>\n        }\n    }\n    return (\n        <>\n            <Header pageName='My songs' showBackButton={true} />\n            <div className='songs-list-container container content'>\n                {getSongs()}\n            </div>\n        </>\n    )\n}\n\nexport default MySongs","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ClubsList/index.tsx",["253","254","255","256","257"],[],"import React, { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport Header from '../../components/header'\nimport { SnackbarTypes } from '../../components/snackbar'\nimport Club, { instanceOfClub } from '../../entities/club'\nimport { UserType } from '../../entities/user'\nimport { useCommonComponents } from '../../providers/commonComponentsProvider'\nimport { useAuth } from '../../providers/userProvider'\nimport NetworkService from '../../services/networkService'\nimport { API_ENDPOINTS } from '../../utils/apiEndpoints'\nimport { RoutesKeys } from '../../utils/routes'\nimport { Error as AppError } from '../../entities/error'\nimport { useClub } from '../../providers/clubProvider'\nimport { SelectSearchOption } from 'react-select-search'\nimport fuzzySearch from '../../utils/fuzzySearch'\nimport ClubItem from '../../components/clubItem'\nimport { useDebounce } from 'usehooks-ts'\nimport './index.scss'\nimport FloatingActionButton, {FabPosition} from '../../components/floating_action_button'\nimport { FaPlus } from 'react-icons/fa'\nimport AddClubForm from './components/addClubForm'\n\n\nconst ClubsList = () => {\n    const { user } =useAuth()\n    const {showLoader,hideLoader, showSnackbar, showPopup, hidePopup} = useCommonComponents()\n    const navigate = useNavigate()\n    const [clubs, setClubs] = useState<Club[]>([])\n    const [filteredClubs, setFilteredClubs] = useState<(Club | null)[]>([])\n    const [searchQuery, setSearchQuery] = useState<string>('')\n    const debouncedValue = useDebounce<string>(searchQuery, 200)\n    let isFetchingClubs = false\n    const fetchClubs = async () => {\n        if(isFetchingClubs) return\n        showLoader(null)\n        isFetchingClubs = true\n        try{\n            const clubsResponse: Club[] | null | AppError = await NetworkService.get({url:API_ENDPOINTS.fetchClubs})\n            hideLoader()\n            if(Array.isArray(clubsResponse) && instanceOfClub(clubsResponse[0])){\n                setClubs(clubsResponse)\n            } else {\n                showSnackbar({\n                    children:<span>Cound not fetch clubs</span>,\n                    type:SnackbarTypes.ERROR\n                })\n            }\n        } catch(err){\n            hideLoader()\n            console.error(err)\n            showSnackbar({\n                children:<span>Cound not fetch clubs</span>,\n                type:SnackbarTypes.ERROR\n            })\n            \n        }\n    }\n    useEffect(() => {\n        fetchClubs()\n    },[])\n    useEffect(() => {\n        if(!user || user.user_type !== UserType.MODERATOR){\n            navigate(RoutesKeys.SELECT_CLUB)\n        }\n    },[user])\n    const filterClubsWithQuery = () => {\n        const options:SelectSearchOption[] = clubs.map((club:Club) => {\n            return {\n                name:club.clubName,\n                value:club.clubId\n            }\n        })\n        let filteredOptions:SelectSearchOption[] = fuzzySearch(options, debouncedValue)\n        let filteredOptionClubs:(Club | null)[] = filteredOptions.map((filteredOption:SelectSearchOption) => {\n            const clubItem:Club | undefined = clubs.find((club:Club) => club.clubId === filteredOption.value.toString()) \n            if(!clubItem) return null\n            return clubItem\n        })\n        setFilteredClubs(filteredOptionClubs)\n    }\n    useEffect(() => {\n        if(debouncedValue.length){\n            filterClubsWithQuery()\n        } else{\n            setFilteredClubs(clubs)\n        }\n    },[debouncedValue])\n    const handleClubDelete = (clubId:string) => {\n        let nonDeletedClubs = clubs.filter((club:Club) => club.clubId !== clubId)\n        setClubs(nonDeletedClubs)\n    }\n    const handleClubUpdate =(updatedClub:Club, clubId:string) => {\n        let nonUpdatedClubs = clubs.map((club:Club) => {\n            if(club.clubId === clubId) return updatedClub\n            return club\n        })\n        setClubs(nonUpdatedClubs)\n    }\n    const handleClubAdd = async (email:string, name:string) => {\n        try{\n            showLoader(null)\n            const data = await NetworkService.post({\n                url:API_ENDPOINTS.addClub,\n                data:{\n                    clubName:name,\n                    email:email\n                }\n            })\n            hideLoader()\n            if(data && data['error']){\n                showSnackbar({\n                    children:<span>Cound not add clubs</span>,\n                    type:SnackbarTypes.ERROR\n                })\n            } else if(instanceOfClub(data)){\n                setClubs([...clubs, data])\n                hidePopup()\n                showSnackbar({\n                    children:<span>Club successfully added</span>,\n                    type:SnackbarTypes.SUCCESS\n                })\n            }\n        } catch(err){\n            hideLoader()\n            console.error(err)\n            showSnackbar({\n                children:<span>Cound not add clubs</span>,\n                type:SnackbarTypes.ERROR\n            })\n        }\n    }\n    const addClub = () => {\n       showPopup({\n        children:<AddClubForm handleClubAdd={handleClubAdd} cancel={hidePopup} />\n       })\n    }\n    useEffect(() => {\n        if(debouncedValue.length){\n            filterClubsWithQuery()\n        } else{\n            setFilteredClubs(clubs)\n        }\n    },[clubs])\n    return (\n        <>\n            <Header pageName='Clubs list' />\n            <div className='clubs-container container content'>\n                <input type=\"text\" placeholder='Search club' value={searchQuery} onChange={(e) => {setSearchQuery(e.target.value)}} />\n                <div className='clubs-list'>\n                    {filteredClubs.length ? filteredClubs.map((club:Club | null, index:number) => <ClubItem key={club?.clubId} club={club} handleClubUpdate={handleClubUpdate} handleClubDelete={handleClubDelete}/>) : <p className='empty-state'>No clubs found</p>}\n                </div>\n                <FloatingActionButton onClick={addClub} isRound={true} position={FabPosition.right}><FaPlus color='white' size={32} /></FloatingActionButton>\n                {/* <SelectSearch options={options} placeholder=\"Choose your club\" search={true} value={club?.clubId} closeOnSelect={true} onChange={handleChange} filterOptions={fuzzySearchWrapper} />\n                <button disabled={!club} className='select-button' onClick={onNextClick}>Select</button> */}\n            </div>\n        </>\n    )\n}\n\nexport default ClubsList","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/clubItem/index.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/components/popUp/index.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ClubsList/components/addClubForm.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ModeratorsList/index.tsx",["258","259","260","261","262"],[],"import React, { useEffect, useState } from 'react'\nimport { FaPlus } from 'react-icons/fa'\nimport { useNavigate } from 'react-router-dom'\nimport { useDebounce } from 'usehooks-ts'\nimport ClubItem from '../../components/clubItem'\nimport FloatingActionButton, { FabPosition } from '../../components/floating_action_button'\nimport Header from '../../components/header'\nimport { SnackbarTypes } from '../../components/snackbar'\nimport Club from '../../entities/club'\nimport { useCommonComponents } from '../../providers/commonComponentsProvider'\nimport { useAuth } from '../../providers/userProvider'\nimport NetworkService from '../../services/networkService'\nimport { API_ENDPOINTS } from '../../utils/apiEndpoints'\nimport AddModForm from './component/addModForm'\nimport ModTile from './component/modTile'\nimport './index.scss'\n\nconst ModeratorsList = () => {\n    const { user } =useAuth()\n    const {showLoader,hideLoader, showSnackbar, showPopup, hidePopup} = useCommonComponents()\n    const navigate = useNavigate()\n    const [mods, setMods] = useState<string[]>([])\n    const [filteredMods, setFilteredMods] = useState<(string | null)[]>([])\n    const [searchQuery, setSearchQuery] = useState<string>('')\n    const debouncedValue = useDebounce<string>(searchQuery, 200)\n    let isFetchingMods = false\n    const handleDelete = async (email:string) => {\n        try{\n            showLoader({\n                children:null,\n                text:'Deleting...'\n            })\n            let data = await NetworkService.post({\n                url:API_ENDPOINTS.deleteMod,\n                data:{\n                    email\n                }\n            })\n            hideLoader()\n            if(data && data['error']){\n                console.error(data)\n                showSnackbar({\n                    children:<span>Cound not delete moderator</span>,\n                    type:SnackbarTypes.ERROR\n                })\n            } else{\n                hidePopup()\n                setMods(mods.filter((mod) => mod !== email))\n                showSnackbar({\n                    children:<span>Moderator deleted successfully</span>,\n                    type:SnackbarTypes.SUCCESS\n                })\n            }\n        } catch(err){\n            console.error(err)\n            hideLoader()\n            showSnackbar({\n                children:<span>Cound not delete moderator</span>,\n                type:SnackbarTypes.ERROR\n            })\n        }\n    }\n    const fetchMods = async() => {\n        if(isFetchingMods) return\n        isFetchingMods = true\n        try{\n            let mods = await NetworkService.get({\n                url:API_ENDPOINTS.getModerators\n            })\n            hideLoader()\n            if(Array.isArray(mods)){\n                setMods(mods)\n            } else{\n                console.error(mods)\n                showSnackbar({\n                    children:<span>Cound not fetch moderators</span>,\n                    type:SnackbarTypes.ERROR\n                })\n            }\n        } catch(err){\n            console.error(err)\n            hideLoader()\n            showSnackbar({\n                children:<span>Cound not fetch moderators</span>,\n                type:SnackbarTypes.ERROR\n            })\n        }\n    }\n    useEffect(() => {\n        fetchMods()\n    },[])\n    const filterMods= ()=>{\n        let modsFiltered = mods.filter((mod:string) => mod.indexOf(debouncedValue) > -1)\n        setFilteredMods(modsFiltered)\n    }\n    useEffect(() => {\n        if(debouncedValue){\n            filterMods()\n        } else{\n            setFilteredMods(mods)\n        }\n    },[debouncedValue, mods])\n    const handleAdd = async (email:string) => {\n        try{\n            showLoader({\n                children:null,\n                text:'Adding...'\n            })\n            let data = await NetworkService.post({\n                url:API_ENDPOINTS.addModerator,\n                data:{\n                    email\n                }\n            })\n            hideLoader()\n            if(data && data['error']){\n                console.error(data)\n                showSnackbar({\n                    children:<span>Cound not add moderator</span>,\n                    type:SnackbarTypes.ERROR\n                })\n            } else{\n                hidePopup()\n                setMods([...mods, email])\n                showSnackbar({\n                    children:<span>Moderator successfully added</span>,\n                    type:SnackbarTypes.SUCCESS\n                })\n            }\n        } catch(err){\n            console.error(err)\n            hideLoader()\n            showSnackbar({\n                children:<span>Cound not add moderator</span>,\n                type:SnackbarTypes.ERROR\n            })\n        }\n    }\n    const addMod = () => {\n        showPopup({\n            children:<AddModForm cancel={hidePopup} handleModbAdd={handleAdd} />\n        })\n    }\n    \n    return (\n        <>\n            <Header pageName='Moderators list' />\n            <div className='clubs-container mods-container container content'>\n                <input type=\"text\" placeholder='Search club' value={searchQuery} onChange={(e) => {setSearchQuery(e.target.value)}} />\n                <div className='clubs-list'>\n                    {filteredMods.length ? filteredMods.map((mod:string | null, index:number) => <ModTile key={mod} email={mod || ''} onDelete={handleDelete} isMe={user?.email === mod}/>) : <p className='empty-state'>No mods found</p>}\n                </div>\n                <FloatingActionButton onClick={addMod} isRound={true} position={FabPosition.right}><FaPlus color='white' size={32} /></FloatingActionButton>\n\n            </div>\n        </>\n    )\n}\n\nexport default ModeratorsList","/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ModeratorsList/component/modTile.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ModeratorsList/component/addModForm.tsx",[],[],"/Users/divjotsingh/Documents/Youchoose/youchoose-frontend/src/pages/ErrorPage/index.tsx",[],[],{"ruleId":"263","severity":1,"message":"264","line":7,"column":8,"nodeType":"265","messageId":"266","endLine":7,"endColumn":12},{"ruleId":"267","severity":1,"message":"268","line":47,"column":7,"nodeType":"269","endLine":47,"endColumn":25,"suggestions":"270"},{"ruleId":"263","severity":1,"message":"271","line":1,"column":8,"nodeType":"265","messageId":"266","endLine":1,"endColumn":13},{"ruleId":"263","severity":1,"message":"272","line":2,"column":25,"nodeType":"265","messageId":"266","endLine":2,"endColumn":42},{"ruleId":"263","severity":1,"message":"273","line":2,"column":98,"nodeType":"265","messageId":"266","endLine":2,"endColumn":118},{"ruleId":"263","severity":1,"message":"274","line":2,"column":167,"nodeType":"265","messageId":"266","endLine":2,"endColumn":184},{"ruleId":"263","severity":1,"message":"275","line":2,"column":218,"nodeType":"265","messageId":"266","endLine":2,"endColumn":237},{"ruleId":"263","severity":1,"message":"276","line":8,"column":10,"nodeType":"265","messageId":"266","endLine":8,"endColumn":29},{"ruleId":"263","severity":1,"message":"277","line":9,"column":10,"nodeType":"265","messageId":"266","endLine":9,"endColumn":26},{"ruleId":"263","severity":1,"message":"278","line":25,"column":11,"nodeType":"265","messageId":"266","endLine":25,"endColumn":20},{"ruleId":"263","severity":1,"message":"279","line":1,"column":10,"nodeType":"265","messageId":"266","endLine":1,"endColumn":14},{"ruleId":"263","severity":1,"message":"280","line":8,"column":10,"nodeType":"265","messageId":"266","endLine":8,"endColumn":24},{"ruleId":"267","severity":1,"message":"281","line":42,"column":7,"nodeType":"269","endLine":42,"endColumn":13,"suggestions":"282"},{"ruleId":"267","severity":1,"message":"283","line":53,"column":7,"nodeType":"269","endLine":53,"endColumn":23,"suggestions":"284"},{"ruleId":"267","severity":1,"message":"285","line":64,"column":7,"nodeType":"269","endLine":64,"endColumn":18,"suggestions":"286"},{"ruleId":"267","severity":1,"message":"287","line":10,"column":7,"nodeType":"269","endLine":10,"endColumn":9,"suggestions":"288"},{"ruleId":"263","severity":1,"message":"289","line":18,"column":8,"nodeType":"265","messageId":"266","endLine":18,"endColumn":12},{"ruleId":"267","severity":1,"message":"290","line":59,"column":7,"nodeType":"269","endLine":59,"endColumn":9,"suggestions":"291"},{"ruleId":"267","severity":1,"message":"285","line":65,"column":7,"nodeType":"269","endLine":65,"endColumn":13,"suggestions":"292"},{"ruleId":"263","severity":1,"message":"293","line":2,"column":10,"nodeType":"265","messageId":"266","endLine":2,"endColumn":21},{"ruleId":"267","severity":1,"message":"281","line":22,"column":7,"nodeType":"269","endLine":22,"endColumn":13,"suggestions":"294"},{"ruleId":"267","severity":1,"message":"295","line":25,"column":6,"nodeType":"269","endLine":25,"endColumn":8,"suggestions":"296"},{"ruleId":"267","severity":1,"message":"297","line":59,"column":7,"nodeType":"269","endLine":59,"endColumn":9,"suggestions":"298"},{"ruleId":"267","severity":1,"message":"299","line":54,"column":7,"nodeType":"269","endLine":54,"endColumn":9,"suggestions":"300"},{"ruleId":"267","severity":1,"message":"287","line":19,"column":7,"nodeType":"269","endLine":19,"endColumn":13,"suggestions":"301"},{"ruleId":"263","severity":1,"message":"302","line":13,"column":10,"nodeType":"265","messageId":"266","endLine":13,"endColumn":17},{"ruleId":"267","severity":1,"message":"290","line":60,"column":7,"nodeType":"269","endLine":60,"endColumn":9,"suggestions":"303"},{"ruleId":"267","severity":1,"message":"287","line":65,"column":7,"nodeType":"269","endLine":65,"endColumn":13,"suggestions":"304"},{"ruleId":"267","severity":1,"message":"305","line":87,"column":7,"nodeType":"269","endLine":87,"endColumn":23,"suggestions":"306"},{"ruleId":"267","severity":1,"message":"307","line":143,"column":7,"nodeType":"269","endLine":143,"endColumn":14,"suggestions":"308"},{"ruleId":"263","severity":1,"message":"309","line":5,"column":8,"nodeType":"265","messageId":"266","endLine":5,"endColumn":16},{"ruleId":"263","severity":1,"message":"310","line":9,"column":8,"nodeType":"265","messageId":"266","endLine":9,"endColumn":12},{"ruleId":"263","severity":1,"message":"311","line":21,"column":11,"nodeType":"265","messageId":"266","endLine":21,"endColumn":19},{"ruleId":"267","severity":1,"message":"312","line":91,"column":7,"nodeType":"269","endLine":91,"endColumn":9,"suggestions":"313"},{"ruleId":"267","severity":1,"message":"314","line":102,"column":7,"nodeType":"269","endLine":102,"endColumn":29,"suggestions":"315"},"@typescript-eslint/no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setInitialUser'. Either include it or remove the dependency array.","ArrayExpression",["316"],"'React' is defined but never used.","'getRedirectResult' is defined but never used.","'signInWithCredential' is defined but never used.","'EmailAuthProvider' is defined but never used.","'EmailAuthCredential' is defined but never used.","'useCommonComponents' is defined but never used.","'ErrorCodeStrings' is defined but never used.","'analytics' is assigned a value but never used.","'type' is defined but never used.","'instanceOfUser' is defined but never used.","React Hook useEffect has a missing dependency: 'redirectToRouteIfAny'. Either include it or remove the dependency array.",["317"],"React Hook useEffect has a missing dependency: 'fetchSongs'. Either include it or remove the dependency array.",["318"],"React Hook useEffect has missing dependencies: 'navigate' and 'setClub'. Either include them or remove the dependency array.",["319"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["320"],"'Song' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchClubs'. Either include it or remove the dependency array.",["321"],["322"],"'useLocation' is defined but never used.",["323"],"React Hook useEffect has missing dependencies: 'duration' and 'hideSnackbar'. Either include them or remove the dependency array. If 'hideSnackbar' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["324"],"React Hook useEffect has missing dependencies: 'club', 'fetchClubSongs', and 'navigate'. Either include them or remove the dependency array.",["325"],"React Hook useEffect has missing dependencies: 'club', 'fetchSuggestedSongsList', and 'navigate'. Either include them or remove the dependency array.",["326"],["327"],"'useClub' is defined but never used.",["328"],["329"],"React Hook useEffect has missing dependencies: 'clubs' and 'filterClubsWithQuery'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredClubs' needs the current value of 'clubs'.",["330"],"React Hook useEffect has missing dependencies: 'debouncedValue.length' and 'filterClubsWithQuery'. Either include them or remove the dependency array.",["331"],"'ClubItem' is defined but never used.","'Club' is defined but never used.","'navigate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchMods'. Either include it or remove the dependency array.",["332"],"React Hook useEffect has a missing dependency: 'filterMods'. Either include it or remove the dependency array.",["333"],{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"336","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"344","fix":"357"},{"desc":"355","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},"Update the dependencies array to be: [isAppInitialised, setInitialUser]",{"range":"367","text":"368"},"Update the dependencies array to be: [redirectToRouteIfAny, user]",{"range":"369","text":"370"},"Update the dependencies array to be: [debouncedValue, fetchSongs]",{"range":"371","text":"372"},"Update the dependencies array to be: [user, club, navigate, setClub]",{"range":"373","text":"374"},"Update the dependencies array to be: [navigate]",{"range":"375","text":"376"},"Update the dependencies array to be: [fetchClubs]",{"range":"377","text":"378"},"Update the dependencies array to be: [navigate, setClub, user]",{"range":"379","text":"380"},{"range":"381","text":"370"},"Update the dependencies array to be: [duration, hideSnackbar]",{"range":"382","text":"383"},"Update the dependencies array to be: [club, fetchClubSongs, navigate]",{"range":"384","text":"385"},"Update the dependencies array to be: [club, fetchSuggestedSongsList, navigate]",{"range":"386","text":"387"},"Update the dependencies array to be: [navigate, user]",{"range":"388","text":"389"},{"range":"390","text":"378"},{"range":"391","text":"389"},"Update the dependencies array to be: [clubs, debouncedValue, filterClubsWithQuery]",{"range":"392","text":"393"},"Update the dependencies array to be: [clubs, debouncedValue.length, filterClubsWithQuery]",{"range":"394","text":"395"},"Update the dependencies array to be: [fetchMods]",{"range":"396","text":"397"},"Update the dependencies array to be: [debouncedValue, filterMods, mods]",{"range":"398","text":"399"},[2080,2098],"[isAppInitialised, setInitialUser]",[1677,1683],"[redirectToRouteIfAny, user]",[2115,2131],"[debouncedValue, fetchSongs]",[2420,2431],"[user, club, navigate, setClub]",[263,265],"[navigate]",[2374,2376],"[fetchClubs]",[2560,2566],"[navigate, setClub, user]",[857,863],[497,499],"[duration, hideSnackbar]",[2152,2154],"[club, fetchClubSongs, navigate]",[2000,2002],"[club, fetchSuggestedSongsList, navigate]",[689,695],"[navigate, user]",[2492,2494],[2639,2645],[3486,3502],"[clubs, debouncedValue, filterClubsWithQuery]",[5316,5323],"[clubs, debouncedValue.length, filterClubsWithQuery]",[3295,3297],"[fetchMods]",[3601,3623],"[debouncedValue, filterMods, mods]"]